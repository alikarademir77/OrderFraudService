# NOTE: For test configuration, use the application.yml in src/test/resources

server:
  port: 8090
  contextPath: /orderfraud
---
spring:
  profiles: uat

#MYSQL:
#  HOSTNAME: ${MYSQL.HOSTNAME}
#  PASSWORD: ${MYSQL.PASSWORD} #ROOT USER PASSWORD
#
#RABBITMQ:
#  HOSTNAME: ${RABBITMQ.HOSTNAME}
#  
#ORDERDETAILS:
#  URL: ${ORDERDETAILS.HOSTNAME}
#  ENDPOINT: ${ORDERDETAILS.ENDPOINT}  
# 
#PAYMENTSERVICE:
#  URL: ${PAYMENTSERVICE.URL} 
#
#RESOURCEAPI:
#  URL: ${RESOURCEAPI.URL}
# 
#TAS:
#  URL: ${TAS.URL}  
# -------------------------------------------------------------------------------------------------------------
# Spring Boot Admin Configurations
# Note: For config options, see https://codecentric.github.io/spring-boot-admin/1.5.7/
# -------------------------------------------------------------------------------------------------------------
  boot:
    admin:
      client:
        enabled: false
        health-url: http://localhost:${server.port}/${server.contextPath}/health
        management-url: http://localhost:${server.port}/${server.contextPath}
        service-url: http://localhost:${server.port}/${server.contextPath}/swagger-ui.html
      url: http://localhost:8100
      username: admin
      password: admin
      auto-deregistration: true # Automatically de-register this application when it shuts down
# -------------------------------------------------------------------------------------------------------------
# Database Configurations
# -------------------------------------------------------------------------------------------------------------
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:mysql://${mysql.hostname}:3306/?useSSL=false
    platform: mysql
    username: root
    password: ${mysql.password}
    driver-class-name: com.mysql.jdbc.Driver
    schema: classpath:relationaldb/mysql.sql
  jpa:
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      ddl-auto: none
    properties:
      hibernate:
        connection:
          provider_class: org.hibernate.hikaricp.internal.HikariCPConnectionProvider
        dialect: org.hibernate.dialect.MySQL5Dialect
        show_sql: true
        use_sql_comments: true
        format_sql: true
        hikari:
          minimumIdle: 1
          maximumPoolSize: 2
          idleTimeout: 5000
          dataSource:
            serverName: ${mysql.hostname}
            portNumber: 3306
            databaseName: ORDER_FRAUD
            user: root
            password: ${mysql.password}
          dataSourceClassName: com.mysql.jdbc.jdbc2.optional.MysqlDataSource

# -------------------------------------------------------------------------------------------------------------
# RabbitMQ Configurations
# -------------------------------------------------------------------------------------------------------------
  rabbitmq:
    host: ${rabbitmq.hostname}
    port: 5672
    username: orders # Login user to authenticate to the RabbitMQ broker
    password: orders # Login password to authenticate to the RabbitMQ broker
    virtual-host: orders # Virtual host to use when connecting to the RabbitMQ broker
  cloud:
    stream:
      bindings:
        fraudInbound:
          destination: fraudInbound # Inbound exchange
          group: fraudInboundConsumersGroup
          consumer:
            concurrency: 1 # The concurrency of the inbound consumer
            maxAttempts: 1 # The number of attempts of re-processing an inbound message
        fraudOutbound:
          destination: fraudOutbound # Outbound exchange
          producer:
            requiredGroups: fraudOutboundConsumersGroup
      rabbit:
        bindings:
          fraudInbound:
            consumer:
              autoBindDlq: true
              dlqTtl: 10000
              republishToDlq: true
              dlqDeadLetterExchange: # Using default exchange so dlqDeadLetterExchange is assigned to empty string
      default:
        contentType: application/json
messaging:
  errorRetryCount: 3
  outbound:
    retry-attempts: 3 # Number of attempts to retry if unable to place message on outbound queue | Default: 0
    timeout: 10000 # (ms)
# -------------------------------------------------------------------------------------------------------------
# Client Configurations
# Note: These are clients for services that Order Fraud Service will need to call
# -------------------------------------------------------------------------------------------------------------
client:
  order-details:
    connection:
      url: ${orderdetails.url} # Base URL
      getOrderDetailsEndpoint: ${orderdetails.endpoint} 
      timeout:
        connection: ~ # (ms)
        request: ~ # (ms)
      ssl:
        enabled: false
        verify-hostname: ~ # Default: true
        keystore: ~ # Prefix with file: or classpath:
        keystore-password: ~
        key-alias: ~ # (Optional)
        key-password: ~ # (Optional)
        truststore: ~ # Prefix with file: or classpath:
        truststore-password: ~
  payment-service:
    connection:
      url: ${paymentservice.url} # Base URL
      timeout:
        connection: ~ # (ms)
        request: ~ # (ms)
      ssl:
        enabled: false
        verify-hostname: ~ # Default: true
        keystore: ~ # Prefix with file: or classpath:
        keystore-password: ~
        key-alias: ~ # (Optional)
        key-password: ~ # (Optional)
        truststore: ~ # Prefix with file: or classpath:
        truststore-password: ~
  resource-api:
    connection:
      url: ${resourceapi.url} # Base URL
      endpoint: /aggregator
      timeout:
        connection: ~ # (ms)
        request: ~ # (ms)
      ssl:
        enabled: false
        keystore: ~ # Prefix with file: or classpath:
        keystore-password: mccp123
        truststore: ~ # Prefix with file: or classpath:
        truststore-password: changeit
  tas:
    connection:
      url: ${tas.url} # Base URL
      fraudcheck-soap-action-callback: fraudMockService
      timeout:
        connection: ~ # (ms)
        request: ~ # (ms)
      ssl:
        enabled: false
        verify-hostname: ~ # Default: true
        keystore: ~ # Prefix with file: or classpath:
        keystore-password: ~
        key-alias: ~ # (Optional)
        key-password: ~ # (Optional)
        truststore: ~ # Prefix with file: or classpath:
        truststore-password: ~
# -------------------------------------------------------------------------------------------------------------
# Logging Configurations
# -------------------------------------------------------------------------------------------------------------
logging:
  level:
    ca.bestbuy: DEBUG
    # ROOT: WARN means that any logging context not matching a context described above will be filtered to level WARN
    ROOT: INFO